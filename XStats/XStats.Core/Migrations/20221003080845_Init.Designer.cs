// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XStats.Core;

#nullable disable

namespace XStats.Core.Migrations
{
    [DbContext(typeof(XStatsContext))]
    [Migration("20221003080845_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "abd46821-8e12-4889-85ee-f217b493a70b",
                            ConcurrencyStamp = "f7925722-dd3d-4670-8448-205f33cf138e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ceb5d49f-7cec-4ad5-9ffe-900047b62ce4",
                            ConcurrencyStamp = "4cc8598f-5adc-4231-9569-482ebc20c08b",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a668281a-7839-4b71-879f-723f889edfe0",
                            RoleId = "abd46821-8e12-4889-85ee-f217b493a70b"
                        },
                        new
                        {
                            UserId = "a668281a-7839-4b71-879f-723f889edfe0",
                            RoleId = "ceb5d49f-7cec-4ad5-9ffe-900047b62ce4"
                        },
                        new
                        {
                            UserId = "464da071-399e-49be-95e3-1d60be7bf2f2",
                            RoleId = "ceb5d49f-7cec-4ad5-9ffe-900047b62ce4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("XStats.Core.DailyLosses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("DailyLosses");
                });

            modelBuilder.Entity("XStats.Core.EquipmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FileTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FileTitle = "aircraft",
                            IconPath = "Images\\eq\\aircraft.png",
                            Order = 1,
                            Title = "Літаки"
                        },
                        new
                        {
                            Id = 2,
                            FileTitle = "helicopter",
                            IconPath = "Images\\eq\\helicopter.png",
                            Order = 2,
                            Title = "Гвинтокрили"
                        },
                        new
                        {
                            Id = 3,
                            FileTitle = "drone",
                            IconPath = "Images\\eq\\drone.png",
                            Order = 3,
                            Title = "Дрони"
                        },
                        new
                        {
                            Id = 4,
                            FileTitle = "anti-aircraft warfare",
                            IconPath = "Images\\eq\\anti-aircraft-warfare.png",
                            Order = 5,
                            Title = "ППО"
                        },
                        new
                        {
                            Id = 5,
                            FileTitle = "cruise missiles",
                            IconPath = "Images\\eq\\cruise-missiles.png",
                            Order = 5,
                            Title = "Крилаті ракети"
                        },
                        new
                        {
                            Id = 6,
                            FileTitle = "tank",
                            IconPath = "Images\\eq\\tank.png",
                            Order = 6,
                            Title = "Танки"
                        },
                        new
                        {
                            Id = 7,
                            FileTitle = "APC",
                            IconPath = "Images\\eq\\apc.png",
                            Order = 7,
                            Title = "БТР"
                        },
                        new
                        {
                            Id = 8,
                            FileTitle = "field artillery",
                            IconPath = "Images\\eq\\field-artillery.png",
                            Order = 8,
                            Title = "Артилерія"
                        },
                        new
                        {
                            Id = 9,
                            FileTitle = "MLP",
                            IconPath = "Images\\eq\\mlr.png",
                            Order = 9,
                            Title = "РСЗВ"
                        },
                        new
                        {
                            Id = 10,
                            FileTitle = "vehicles and fuel tanks",
                            IconPath = "Images\\eq\\vehicles-and-fuel-tanks.png",
                            Order = 10,
                            Title = "Техніка і цистерни з ПММ"
                        },
                        new
                        {
                            Id = 11,
                            FileTitle = "naval ship",
                            IconPath = "Images\\eq\\naval-ship.png",
                            Order = 11,
                            Title = "Морські кораблі"
                        },
                        new
                        {
                            Id = 12,
                            FileTitle = "special equipment",
                            IconPath = "Images\\eq\\special-equipment.png",
                            Order = 12,
                            Title = "Спец. обладнання"
                        });
                });

            modelBuilder.Entity("XStats.Core.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a668281a-7839-4b71-879f-723f889edfe0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15227e94-195e-4404-a02f-4e0af18e7119",
                            Email = "admin@xstats.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@XSTATS.COM",
                            NormalizedUserName = "ADMIN@XSTATS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFXyPbsb6AvXP1aVzHLl2OJUG1RPxeRaBGid/ZIGVNvo0crbg5HKCqip15UGphVdzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3eb8f1c-322f-43e6-9be6-0272b65137cd",
                            TwoFactorEnabled = false,
                            UserName = "admin@xstats.com"
                        },
                        new
                        {
                            Id = "464da071-399e-49be-95e3-1d60be7bf2f2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea34ce42-c7e3-48f6-b409-09de37bcc488",
                            Email = "user@xstats.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@XSTATS.COM",
                            NormalizedUserName = "USER@XSTATS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECXw3EF3AX3Kipc5qE2eIl8vcGBDLAZERE9OiqLl+pJRC9/jzWI1wIX+t+32jw9pDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63b9da3a-803d-418e-a298-3cd36625417c",
                            TwoFactorEnabled = false,
                            UserName = "user@xstats.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("XStats.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("XStats.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XStats.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("XStats.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XStats.Core.DailyLosses", b =>
                {
                    b.HasOne("XStats.Core.EquipmentType", "Type")
                        .WithMany("Losses")
                        .HasForeignKey("TypeId");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("XStats.Core.EquipmentType", b =>
                {
                    b.Navigation("Losses");
                });
#pragma warning restore 612, 618
        }
    }
}
